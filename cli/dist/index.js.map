{"version":3,"sources":["../command/add.ts","../index.ts"],"sourcesContent":["import fs from 'fs';\r\nimport Tree from \"console-log-tree\";\r\n\r\nconst defaultDir = './src/app/(auth)/admin';\r\n\r\nexport const addClientFolder = (folderName: string) => {\r\n\r\n    if (!fs.existsSync(defaultDir + '/' + folderName.toLocaleLowerCase())) {\r\n        // If it doesn't exist, create the directory\r\n        fs.mkdirSync(defaultDir + '/' + folderName.toLocaleLowerCase());\r\n        console.log(`Directory '${defaultDir + '/' + folderName}' created. \\n`);\r\n    } else {\r\n        console.log(`Directory '${defaultDir + '/' + folderName}' already exists.`);\r\n    }\r\n\r\n    return addFiles(folderName)\r\n};\r\n\r\n\r\nconst addFiles = (folderName: string ) => {\r\n\r\n    const stubFunctionName = \"{_function_name_}\"\r\n    const stubEndpointName = \"{_endpoint_name_}\"\r\n\r\n    const files = fs.readdirSync('./cli/stubs').map( file => { return file })\r\n\r\n    files.map(async (file) => {\r\n        const reading       = fs.readFileSync(\"./cli/stubs/\" + file, \"utf8\");\r\n        const firstLetter   = folderName.charAt(0);\r\n        const letters       = folderName.slice(1);\r\n        const functionName  = firstLetter.toUpperCase() + letters;\r\n        const content       = reading.replaceAll(stubFunctionName, functionName).replaceAll(stubEndpointName, folderName.toLocaleLowerCase());\r\n\r\n        return createAndWriteFile(folderName, file, content)\r\n    });\r\n\r\n    Tree.log({\r\n        \"name\": `${defaultDir}`,\r\n        \"children\": [\r\n            {\r\n                \"name\": `${folderName}`,\r\n                \"children\": [\r\n                    { \"name\": \"cards.tsx\" },\r\n                    { \"name\": \"data-controller.tsx\" },\r\n                    { \"name\": \"page.tsx\" },\r\n                    { \"name\": \"table.tsx\" },\r\n                    { \"name\": \"view-controller.tsx\" },\r\n                ]\r\n            },\r\n        ]\r\n    })\r\n    process.exit(0)\r\n}\r\n\r\n\r\nexport const createAndWriteFile = (foldername: string, filename: string, content: string) =>\r\n{\r\n    try {\r\n        return fs.writeFileSync(`./${defaultDir}/${foldername}/${filename.replaceAll('.stub','')}.tsx`, content);\r\n    } catch (err) {\r\n        console.error(err);\r\n    }\r\n}","#!/usr/bin/env node\r\n\r\nimport { addClientFolder } from \"./command/add\"\r\n\r\nprocess.on(\"SIGINT\", () => process.exit(0))\r\nprocess.on(\"SIGTERM\", () => process.exit(0))\r\n\r\nasync function main() {\r\n\r\n    const originCommands        = process.argv\r\n    const originCommandsLegth   = originCommands.length\r\n    const commands              = originCommands.slice(2, originCommandsLegth)\r\n\r\n    // Create for Client\r\n    const client = \"-c\"\r\n    const isForClient   = commands.find(item => item === client);\r\n    const clientIndex   = commands.indexOf(client);\r\n\r\n    // Create for Server API\r\n    const server = \"-s\"\r\n    const isServer      = commands.find(item => item === server);\r\n\r\n    // Directory name\r\n    const directoryName = \"-d\"\r\n    const issetDirName  = commands.find(item => item === directoryName);\r\n    const indexDir      = commands.indexOf(directoryName);\r\n\r\n\r\n    // Checking Folder name\r\n    const folderName    = commands[clientIndex + 1] != directoryName ? commands[clientIndex + 1] : undefined\r\n    const newDirectory  = commands[indexDir + 1] ??  undefined\r\n\r\n    if (isForClient) {\r\n\r\n        if (!folderName) {\r\n            console.log(`Could not find folder name is ${folderName}`);\r\n            process.exit(0)\r\n        }\r\n        addClientFolder(folderName)\r\n    }\r\n\r\n}\r\n\r\nmain()\r\n"],"mappings":";AAAA,OAAOA,MAAQ,KACf,OAAOC,MAAU,mBAEjB,IAAMC,EAAa,yBAENC,EAAmBC,IAEvBJ,EAAG,WAAWE,EAAa,IAAME,EAAW,kBAAkB,CAAC,EAKhE,QAAQ,IAAI,cAAcF,EAAa,IAAME,CAAU,mBAAmB,GAH1EJ,EAAG,UAAUE,EAAa,IAAME,EAAW,kBAAkB,CAAC,EAC9D,QAAQ,IAAI,cAAcF,EAAa,IAAME,CAAU;AAAA,CAAe,GAKnEC,EAASD,CAAU,GAIxBC,EAAYD,GAAwB,CAEtC,IAAME,EAAmB,oBACnBC,EAAmB,oBAEXP,EAAG,YAAY,aAAa,EAAE,IAAKQ,GAAiBA,CAAM,EAElE,IAAI,MAAOA,GAAS,CACtB,IAAMC,EAAgBT,EAAG,aAAa,eAAiBQ,EAAM,MAAM,EAC7DE,EAAgBN,EAAW,OAAO,CAAC,EACnCO,EAAgBP,EAAW,MAAM,CAAC,EAClCQ,EAAgBF,EAAY,YAAY,EAAIC,EAC5CE,EAAgBJ,EAAQ,WAAWH,EAAkBM,CAAY,EAAE,WAAWL,EAAkBH,EAAW,kBAAkB,CAAC,EAEpI,OAAOU,EAAmBV,EAAYI,EAAMK,CAAO,CACvD,CAAC,EAEDZ,EAAK,IAAI,CACL,KAAQ,GAAGC,CAAU,GACrB,SAAY,CACR,CACI,KAAQ,GAAGE,CAAU,GACrB,SAAY,CACR,CAAE,KAAQ,WAAY,EACtB,CAAE,KAAQ,qBAAsB,EAChC,CAAE,KAAQ,UAAW,EACrB,CAAE,KAAQ,WAAY,EACtB,CAAE,KAAQ,qBAAsB,CACpC,CACJ,CACJ,CACJ,CAAC,EACD,QAAQ,KAAK,CAAC,CAClB,EAGaU,EAAqB,CAACC,EAAoBC,EAAkBH,IACzE,CACI,GAAI,CACA,OAAOb,EAAG,cAAc,KAAKE,CAAU,IAAIa,CAAU,IAAIC,EAAS,WAAW,QAAQ,EAAE,CAAC,OAAQH,CAAO,CAC3G,OAASI,EAAK,CACV,QAAQ,MAAMA,CAAG,CACrB,CACJ,EC1DA,QAAQ,GAAG,SAAU,IAAM,QAAQ,KAAK,CAAC,CAAC,EAC1C,QAAQ,GAAG,UAAW,IAAM,QAAQ,KAAK,CAAC,CAAC,EAE3C,eAAeC,GAAO,CAElB,IAAMC,EAAwB,QAAQ,KAChCC,EAAwBD,EAAe,OACvCE,EAAwBF,EAAe,MAAM,EAAGC,CAAmB,EAGnEE,EAAS,KACTC,EAAgBF,EAAS,KAAKG,GAAQA,IAASF,CAAM,EACrDG,EAAgBJ,EAAS,QAAQC,CAAM,EAGvCI,EAAS,KACTC,EAAgBN,EAAS,KAAKG,GAAQA,IAASE,CAAM,EAGrDE,EAAgB,KAChBC,EAAgBR,EAAS,KAAKG,GAAQA,IAASI,CAAa,EAC5DE,EAAgBT,EAAS,QAAQO,CAAa,EAI9CG,EAAgBV,EAASI,EAAc,CAAC,GAAKG,EAAgBP,EAASI,EAAc,CAAC,EAAI,OACzFO,EAAgBX,EAASS,EAAW,CAAC,GAAM,OAE7CP,IAEKQ,IACD,QAAQ,IAAI,iCAAiCA,CAAU,EAAE,EACzD,QAAQ,KAAK,CAAC,GAElBE,EAAgBF,CAAU,EAGlC,CAEAb,EAAK","names":["fs","Tree","defaultDir","addClientFolder","folderName","addFiles","stubFunctionName","stubEndpointName","file","reading","firstLetter","letters","functionName","content","createAndWriteFile","foldername","filename","err","main","originCommands","originCommandsLegth","commands","client","isForClient","item","clientIndex","server","isServer","directoryName","issetDirName","indexDir","folderName","newDirectory","addClientFolder"]}